import OpenAI from 'https://cdn.jsdelivr.net/npm/openai@4.0.0/+esm';

const openai = new OpenAI({
    apiKey: import.meta.env.VITE_OPENAI_API_KEY,
    dangerouslyAllowBrowser: true
});

var map = L.map('map').setView([0, 0], 2);
var markers = [];

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);
	
async function getWeatherData(lat, lng) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&hourly=temperature_2m,weathercode&daily=weathercode,temperature_2m_max,temperature_2m_min&timezone=auto&forecast_days=7`;

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API');
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        return null;
    }
}

function getClothingRecommendation(temperature) {
    if (temperature < 0) return "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, —à–∞—Ä—Ñ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.";
    if (temperature < 10) return "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–¥–µ—Ç—å –ø–∞–ª—å—Ç–æ –∏–ª–∏ –∫—É—Ä—Ç–∫—É.";
    if (temperature < 20) return "–£–º–µ—Ä–µ–Ω–Ω–æ —Ç–µ–ø–ª–æ. –ü–æ–¥–æ–π–¥–µ—Ç –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä.";
    if (temperature < 25) return "–¢–µ–ø–ª–æ. –ú–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —Ñ—É—Ç–±–æ–ª–∫—É –∏ –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏ –∏–ª–∏ —é–±–∫—É.";
    return "–ñ–∞—Ä–∫–æ! –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä.";
}

function getWeatherIcon(weatherCode) {
    if (weatherCode <= 3) return "‚òÄÔ∏è"; 
    if (weatherCode <= 48) return "‚òÅÔ∏è";
    if (weatherCode <= 77) return "üåßÔ∏è";
    if (weatherCode <= 82) return "üå®Ô∏è";
    return "‚õàÔ∏è";
}

async function getAIRecommendation(weatherData) {
    try {
        const currentTemp = weatherData.hourly.temperature_2m[new Date().getHours()];
        const weatherCode = weatherData.hourly.weathercode[new Date().getHours()];
        
        const response = await openai.chat.completions.create({
            model: "gpt-4",
            messages: [{
                role: "user",
                content: `–î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –æ–¥–µ–∂–¥–µ –¥–ª—è –ø–æ–≥–æ–¥—ã: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${currentTemp}¬∞C, –∫–æ–¥ –ø–æ–≥–æ–¥—ã ${weatherCode}`
            }],
            temperature: 0.7,
            max_tokens: 300
        });

        return response.choices[0].message.content;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI:', error);
        return getClothingRecommendation(currentTemp); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

async function formatWeatherData(data) {
    if (!data || !data.hourly) return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ';

    const currentHour = new Date().getHours();
    const temp = data.hourly.temperature_2m[currentHour];
    const weatherCode = data.hourly.weathercode[currentHour];
    const icon = getWeatherIcon(weatherCode);
    const aiRecommendation = await getAIRecommendation(data);

    let forecast = `<h3>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: ${icon} ${temp.toFixed(1)}¬∞C</h3>`;
    forecast += `<p>${aiRecommendation}</p>`;
    forecast += "<h4>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π:</h4>";

    for (let i = 0; i < 7; i++) {
        const date = new Date(data.daily.time[i]).toLocaleDateString();
        const minTemp = data.daily.temperature_2m_min[i];
        const maxTemp = data.daily.temperature_2m_max[i];
        const dayIcon = getWeatherIcon(data.daily.weathercode[i]);
        forecast += `<p>${date}: ${dayIcon} ${minTemp.toFixed(1)}¬∞C - ${maxTemp.toFixed(1)}¬∞C</p>`;
    }

    return forecast;
}

function saveMarkersToLocalStorage() {
    const markersData = markers.map(marker => {
        const latLng = marker.getLatLng();
        return {
            lat: latLng.lat,
            lng: latLng.lng
        };
    });
    localStorage.setItem('savedMarkers', JSON.stringify(markersData));
}

async function loadMarkersFromLocalStorage() {
    const savedMarkers = localStorage.getItem('savedMarkers');
    if (savedMarkers) {
        const markersData = JSON.parse(savedMarkers);
        for (const markerData of markersData) {
            await addMarker(markerData.lat, markerData.lng);
        }
    }
}

async function addMarker(lat, lng) {
    const weatherData = await getWeatherData(lat, lng);
    let popupContent = `<h3>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat}, ${lng}</h3>`;
    popupContent += await formatWeatherData(weatherData);

    const marker = L.marker([lat, lng]).addTo(map)
        .bindPopup(popupContent)
        .openPopup();

    markers.push(marker);
    updateFavorites();
    saveMarkersToLocalStorage();
}

map.on('click', async function(e) {
    var lat = e.latlng.lat.toFixed(4);
    var lng = e.latlng.lng.toFixed(4);
    addMarker(lat, lng);
});

function updateFavorites() {
    const favoritesList = document.getElementById('favorites');
    favoritesList.innerHTML = '';
    markers.forEach((marker, index) => {
        const li = document.createElement('li');
        li.textContent = `–õ–æ–∫–∞—Ü–∏—è ${index + 1}: ${marker.getLatLng().lat.toFixed(4)}, ${marker.getLatLng().lng.toFixed(4)}`;
        li.onclick = () => {
            map.setView(marker.getLatLng(), 10);
            marker.openPopup();
        };
        favoritesList.appendChild(li);
    });
}

document.getElementById('citySearch').addEventListener('submit', async function(e) {
    e.preventDefault();
    const city = document.getElementById('cityInput').value;

    try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(city)}`);
        const data = await response.json();
		console.log(data);
		
        if (data && data.length > 0) {
            const { lat, lon } = data[0];
            map.setView([lat, lon], 10);
            addMarker(lat, lon);
        } else {
            alert('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞');
    }
});

function clearAllMarkers() {
    markers.forEach(marker => {
        map.removeLayer(marker);
    });
    markers = [];
    updateFavorites();
    localStorage.removeItem('savedMarkers');
}

document.getElementById('clearMarkers').addEventListener('click', clearAllMarkers);

document.addEventListener('DOMContentLoaded', () => {
    loadMarkersFromLocalStorage();
});